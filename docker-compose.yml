version: '3.9'

networks:
  monitor-appointment:
    driver: bridge

services:
  db:
    image: 'postgres:13.1-alpine'
    container_name: appointment-db
    volumes:
      - ./health_service_data/volumes_myappointment/postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=myApp@123
      - POSTGRES_USER=myappointment
      - POSTGRES_DB=appointmentdb
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - monitor-appointment
    ports:
      - "5400:5432"
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./health_service_data/volumes_myappointment/prometheus_data:/prometheus
    networks:
      - monitor-appointment
    ports:
      - "9090:9090"
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - monitor-appointment
  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 29092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:9092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: appointment-mail-topic:3:1
    networks:
      - monitor-appointment
  service-discovery:
    image: 'service-discovery-eureka'
    container_name: service-discovery-eureka
    build:
      context: eureka/
    networks:
      - monitor-appointment
    ports:
      - "9001:9001"
  api-gateway:
    image: 'api-gateway'
    container_name: api-gateway
    build:
      context: api-gateway/
    networks:
      - monitor-appointment
    ports:
    - "9000:9000"
    depends_on:
      - service-discovery
      - appointment-api
      - mail-api
  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./health_service_data/volumes_myappointment/grafana_data:/var/lib/grafana
    networks:
      - monitor-appointment
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=grafana123
      - GF_USERS_ALLOW_SIGN_UP=false
  appointment-api:
    image: 'appointment-api:latest'
    container_name: appointment-api
    build:
      context: myappointment/
    depends_on:
      - db
      - service-discovery
      - kafka
    networks:
      - monitor-appointment
    ports:
      - "7000:7000"
      - "8000:8000"
    deploy:
      mode: replicated
      replicas: 1
  mail-api:
    image: 'mail-api:latest'
    container_name: mail-api
    build:
      context: mail-service/
    depends_on:
      - service-discovery
      - kafka
    networks:
      - monitor-appointment
    ports:
      - "7001:7001"
      - "8001:8001"
    deploy:
      mode: replicated
      replicas: 1